import{_ as s,o as n,c as a,a as l,d as o,f as e}from"./app-60c8e404.js";const p={},c=o("p",null,"浏览器异步原理",-1),r=e(`<h1 id="浏览器异步原理" tabindex="-1"><a class="header-anchor" href="#浏览器异步原理" aria-hidden="true">#</a> 浏览器异步原理</h1><h2 id="一、浏览器机制" tabindex="-1"><a class="header-anchor" href="#一、浏览器机制" aria-hidden="true">#</a> 一、浏览器机制</h2><h3 id="_1-1-浏览器进程" tabindex="-1"><a class="header-anchor" href="#_1-1-浏览器进程" aria-hidden="true">#</a> 1.1 浏览器进程</h3><p><strong>浏览器是多进程的</strong>，我们每打开标签页就会产生一个进程，因此打开的标签页越多，进程就越多，对CPU的消耗就越严重，从而出现卡顿。以Chrome浏览器为例，我们可以通过<strong>浏览器右侧设置-更多工具-任务管理器</strong>查看当前浏览器进程。Chrome浏览器主要进程包括<strong>1个浏览器进程（Browser进程）、1个GPU进程、1个网络进程、多个渲染进程和多个插件进程</strong>。</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b4b762c96e854bf7aa0782a304814099~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?" alt="浏览器是多进程的" tabindex="0" loading="lazy"><figcaption>浏览器是多进程的</figcaption></figure><ul><li><strong>浏览器主进程（Browser进程）：</strong> 主要负责界面显示、用户交互、子进程管理，同时提供存储等功能</li><li><strong>GPU进程：</strong> GPU 进程的使用初衷是为了实现3D CSS的效果，只是后来网页、Chrome的UI界面都选择采用 GPU进行绘制，使得GPU成为浏览器的普遍需求。终于，Chrome 在其多进程架构上也引入了 GPU 进程</li><li><strong>网络进程：</strong> 主要负责页面的网络资源加载</li><li><strong>插件进程：</strong> 主要是负责插件的运行，因为插件容易崩溃，所以需要通过单独的插件进程将其隔离，以保证插件进程崩溃不会对浏览器和页面造成影响</li><li><strong>渲染进程：</strong> 即我们通常所说的浏览器内核，其内部是多线程的，每个标签页至少有一个渲染进程，并且多个渲染进程之间互不影响，主要负责<strong>页面渲染、脚本执行、事件处理</strong>等，我们常说的<strong>JavaScript V8引擎</strong>就运行在这个进程中，也是本文的重点</li></ul><h3 id="_1-2-多线程的渲染进程" tabindex="-1"><a class="header-anchor" href="#_1-2-多线程的渲染进程" aria-hidden="true">#</a> 1.2 多线程的渲染进程</h3><p>浏览器的渲染进程是多线程的，主要由<strong>Javascript引擎线程、GUI渲染线程、事件监听线程、定时器线程、异步http请求线程</strong>等组成。</p><ul><li><strong>Javascript引擎线程：</strong> 是Javascript内核，主要负责解析并运行Javascript脚本，不管打开了多少个标签页，一个浏览器只能有一个Javascript引擎线程运行JavaScript代码，因此<strong>JavaScript是单线程</strong>的。而<strong>异步是由子线程完成的，Javascript引擎负责调度子线程</strong>。</li><li><strong>GUI渲染线程：</strong> 负责浏览器界面渲染，包括解析HTML、CSS、构建DOM树、RenderObject树、布局、页面绘制等。注意<strong>Javascript引擎线程与GUI渲染线程是互斥的</strong>，GUI更新会被保存在一个队列中等到Javascript引擎空闲时才会被执行。</li><li><strong>事件监听线程：</strong> 负责对事件进行处理，归属于浏览器而不是Javascript引擎，对Javascript引擎起到辅助作用，用来控制事件循环。它管理着一个<strong>事件队列（Task Queue）</strong>,当JavaScript执行碰到诸如事件绑定、Ajax异步请求、setTimeOut等，会把它交给相应线程处理（如定时器线程、异步http请求线程），拿到结果后将其回调对应任务添加到事件队列的队尾，排队等待Javascript引擎的处理。</li><li><strong>定时器线程：</strong> 我们常用的**<code>setInterval</code>与<code>setTimeout</code>所在线程**。注意，<strong>浏览器的定时计数器并不是由Javascript引擎计数</strong>的，因为JavaScript引擎是单线程的，如果处于阻塞线程状态就会影响记计时的准确性，因此<strong>通过单独线程来计时并触发定时</strong>，计时完毕后，添加到事件队列中，等待Javascript引擎空闲后执行。W3C在HTML标准中规定，规定要求<code>setTimeout</code>中低于4ms的时间间隔算为4ms，也就是说0ms也算是4ms。</li><li>**异步http请求线程：**负责处理http请求。在XMLHttpRequest连接后是通过浏览器新开一个线程请求，将检测到状态变更时，<strong>如果设置有回调函数，异步线程就产生状态变更事件，将这个回调再放入事件队列中</strong>，再由JavaScript引擎执行。</li></ul><h3 id="_1-3-事件循环" tabindex="-1"><a class="header-anchor" href="#_1-3-事件循环" aria-hidden="true">#</a> 1.3 事件循环</h3><h4 id="_1-3-1-事件循环机制" tabindex="-1"><a class="header-anchor" href="#_1-3-1-事件循环机制" aria-hidden="true">#</a> 1.3.1 事件循环机制</h4><p>Javascript是单线程的，因此我们执行一些高耗时的操作考虑会造成阻塞，为此Javascript将任务分为同步任务和异步任务。</p><p><strong>同步任务：</strong> 又叫做非耗时任务，指的是在主线程排队执行的任务。只有前一个任务执行完毕，后一个才可执行。</p><p><strong>异步任务：</strong> 又叫做耗时任务，异步任务由JavaScript委托给宿主环境进行执行。</p><p><strong>同步任务在主线程上运行</strong>（这里的主线程之的是JavaScript引擎线程），形成执行栈。而在主线程之外，事件监听线程管理着一个事件队列，只要异步任务执行完毕，就会检查其是否存在回调，并把回调加入到任务队列中，当Javascript完成了同步任务清空执行栈之后就空闲下来了，JavaScript就会读取任务队列中的异步任务回调，并添加到执行栈中开始执行。</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/62b99239b7a14b909bb0d817fb3d5aa1~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?" alt="JavaScript Event Loop" tabindex="0" loading="lazy"><figcaption>JavaScript Event Loop</figcaption></figure><h4 id="_1-3-2-es6中的事件循环机制" tabindex="-1"><a class="header-anchor" href="#_1-3-2-es6中的事件循环机制" aria-hidden="true">#</a> 1.3.2 ES6中的事件循环机制</h4><ul><li><strong>1. 两种异步任务类型</strong></li></ul><p>ES6在事件循环的概念之上新增加了<strong>任务队列（Job Queue）</strong> 的新概念，它将异步任务分成宏任务和微任务两种类型。<strong>宏任务Task（macrotask）</strong> 我们姑且叫它为正常的任务，它是由<strong>宿主</strong>（浏览器/Node）发起的，追加到下一轮事件循环。而<strong>微任务Jobs（microtask）</strong> 可以说是充了SVIP，它由<strong>JavaScript</strong>自身发起，追加到本轮事件循环，意味着微任务可以插队，在本轮事件循环结束前执行，不用等到下一轮。</p><ul><li><strong>2. 流程图</strong></li></ul><figure><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e52b55b3ecf9434c88a812a62b6c40b9~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?" alt="宏任务和微任务" tabindex="0" loading="lazy"><figcaption>宏任务和微任务</figcaption></figure><ul><li><strong>3. 常见微任务和宏任务</strong></li></ul><table><thead><tr><th>宏任务（macrotask）</th><th>微任务（microtask）</th></tr></thead><tbody><tr><td>setTimeout</td><td><strong>Promise.[ then/catch/finally ]</strong>、async（本质也是Promise）</td></tr><tr><td>setInterval</td><td>Object.observe</td></tr><tr><td>I/O任务</td><td>MutationObserver（浏览器环境）</td></tr><tr><td>setImmediate（nodejs）</td><td>process.nextTick（nodejs）</td></tr><tr><td>script代码块</td><td>queueMicrotask</td></tr></tbody></table><p><em><strong>PS：</strong> 这里把 script 代码块想象成多个中的一个，那么会执行第一个 script 代码块中的同步代码开启宏任务，并清空微任务队列，然后再去执行第二个 script 代码块中的代码，这样就可以很好的理解了。也就是说，在一个宏任务中开启执行清理全部微任务，然后开启下一个宏任务，这样也就理解了微任务是在宏任务中追加开启的这个事实了。</em></p><h2 id="二、异步回调有什么问题" tabindex="-1"><a class="header-anchor" href="#二、异步回调有什么问题" aria-hidden="true">#</a> 二、异步回调有什么问题</h2><blockquote><p>从第一部分，我们已经基本了解了JavaScript异步执行机制，接下来我们讲讲ES6之前最传统的异步解决方案之一——回调（callback），从回调存在的问题理解Promise的出现原因</p></blockquote><p>回调是编写和处理JavaScript程序异步逻辑的最常方式，是JavaScript最基础的异步模式。MDN中这样定义回调函数：<strong>回调函数是作为参数传给另一个函数的函数，然后通过在外部函数内部调用该回调函数以完成某种操作</strong>。太绕了！换句话说，回调函数是一个函数，他会在外部函数完成执行其他动作后再最后执行。从第一部分内容来看，回调确实可以解决单线程JavaScript线程阻塞的问题，但是它也存在许许多多的问题。</p><h3 id="_2-1-回调地狱" tabindex="-1"><a class="header-anchor" href="#_2-1-回调地狱" aria-hidden="true">#</a> 2.1 回调地狱</h3><p>考虑以下代码，这就是传说中的回调地狱，一层一层的往下嵌套，形似倒三角形状，因此也叫毁灭金字塔，它使得代码的逻辑变得难以理解和维护。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">javascript复制代码setTimeout</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;地狱1层到了，请不要倚靠车门，注意安全&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">setTimeout</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;地狱2层到了，请不要倚靠车门，注意安全&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#61AFEF;">setTimeout</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () { </span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;地狱3层到了，请不要倚靠车门，注意安全&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#7F848E;font-style:italic;">// ...还有15层呢</span></span>
<span class="line"><span style="color:#ABB2BF;">        }, </span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }, </span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}, </span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、promise详解" tabindex="-1"><a class="header-anchor" href="#三、promise详解" aria-hidden="true">#</a> 三、Promise详解</h2><blockquote><p>回调函数存在诸多问题，为此ES 6推出了Promise，有效的避免了回调地狱的出现</p></blockquote><p>所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。</p><h3 id="_3-1-promise特点" tabindex="-1"><a class="header-anchor" href="#_3-1-promise特点" aria-hidden="true">#</a> 3.1 Promise特点</h3><ul><li><strong>对象的状态不受外界影响</strong>。<code>Promise</code>对象代表一个异步操作，有且只有三种状态：<code>pending</code>（进行中）、<code>fulfilled</code>（已成功）和<code>rejected</code>（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态</li><li><strong>一旦状态改变，就不会再变，任何时候都是这个状态，都是这个结果。</strong><code>Promise</code>对象的状态改变，只有两种可能：从<code>pending</code>变为<code>fulfilled</code>和从<code>pending</code>变为<code>rejected</code>。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果，这时就称为 resolved（已定型）。</li></ul><h3 id="_3-2-promise避免回调函数问题" tabindex="-1"><a class="header-anchor" href="#_3-2-promise避免回调函数问题" aria-hidden="true">#</a> 3.2 Promise避免回调函数问题</h3><h4 id="_3-2-1-调用时间问题" tabindex="-1"><a class="header-anchor" href="#_3-2-1-调用时间问题" aria-hidden="true">#</a> 3.2.1 调用时间问题</h4><p>回调分为<strong>异步回调和同步回调</strong>，典型同步回调如<code>forEach</code>，异步回调如<code>setTimeout</code>。在回调函数中，会在调用完成时得到结果，这个时间点你无法把控，它可能是同步的，也可能是异步的，尤其是在调用一些第三方库是根本无法确定。而在Pormise中，你无需担心这个问题，因为即使Promise被立即resolved，它也无法被同步的观察到，不可能存在调用过早的问题，而<strong>作为微任务的<code>then</code>，会在本次宏任务结束后、下一次宏任务启动前插队运行</strong>，也就不会出现调用过晚的问题了。</p><h4 id="_3-2-2-调用次数问题" tabindex="-1"><a class="header-anchor" href="#_3-2-2-调用次数问题" aria-hidden="true">#</a> 3.2.2 调用次数问题</h4><p>回调被正确调用的次数应该是一次。而根据Promise的两个特点我们知道，回调在决议是会且只会调用了注册的<code>resolve</code>和<code>reject</code>两个回调之一，并且<strong>只接受第一次决议的结果，就成为了不可变值</strong>，这样就保证了回调调用的次数。但是若Promise永远不被决议呢？当然也有相应的解决方案，Promiset提供了竞态接口来帮助我们解决这个问题，在之后的静态方法<code>Promise.race</code>中会介绍。</p><h4 id="_3-2-3-参数问题" tabindex="-1"><a class="header-anchor" href="#_3-2-3-参数问题" aria-hidden="true">#</a> 3.2.3 参数问题</h4><p><strong><code>resolve</code>只接收一个或者零个参数</strong>，当不传参时，它会决议为<code>undefined</code>，而如果传入多个参数，生效的只会是第一个参数，其他参数都会被忽略，如果要传入多个参数，需要传入数组或对象，使用解构来进行传递。</p><h4 id="_3-2-4-错误或异常吞并问题" tabindex="-1"><a class="header-anchor" href="#_3-2-4-错误或异常吞并问题" aria-hidden="true">#</a> 3.2.4 错误或异常吞并问题</h4><p><code>try...catch</code>在异步代码中显然无法发挥作用，但Promise提供了<code>catch</code> 方法供我们进行错误处理，当然也可以使用<code>then</code>的第二个参数处理，将错误暴露出去，但从美观和思维模式上来说并不推荐。</p><h4 id="_3-2-4-回调地狱" tabindex="-1"><a class="header-anchor" href="#_3-2-4-回调地狱" aria-hidden="true">#</a> 3.2.4 回调地狱</h4><p>Promise会通过<code>.then</code>的链式流完美的将异步流程以同步操作式的流程表达出来，你甚至可以像写同步代码一样写异步代码。</p><h3 id="_3-3-使用promise" tabindex="-1"><a class="header-anchor" href="#_3-3-使用promise" aria-hidden="true">#</a> 3.3 使用Promise</h3><h4 id="_3-3-1-new-promise" tabindex="-1"><a class="header-anchor" href="#_3-3-1-new-promise" aria-hidden="true">#</a> 3.3.1 new Promise</h4><p>在ES6中，我们可以提供构造函数Promise来创建Promise实例，它有两个参数，通常用<code>resolve</code>和<code>reject</code>来表示，它们由JavaScript引擎提供，无需自己部署，<code>resolve</code>可以将promise的状态由<code>pending</code>转变为<code>fulfilled</code>或<code>rejected</code>（比如传入的参数是另一个promise）**并将结果作为参数传递出去，<code>reject</code>则可以将promise的状态由<code>pending</code>转变为<code>rejected</code>，并将错误暴露出去，</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">promise</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 在这里干些什么，如果是同步代码会加入执行栈立即执行</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#7F848E;font-style:italic;">/* 操作成功 */</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">reject</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>值得注意的是，<strong><code>resolve</code>和<code>reject</code>不会终止函数的执行</strong>，所以为了避免意外，一般会这样用：<strong><code>return resolve(...)</code> / <code>return reject(...)</code></strong></p><h4 id="_3-3-2-promise-prototype-then" tabindex="-1"><a class="header-anchor" href="#_3-3-2-promise-prototype-then" aria-hidden="true">#</a> 3.3.2 Promise.prototype.then</h4><ul><li><strong>基本用法</strong></li></ul><p><code>then</code>方法接受两个回调函数作为参数，第一个回调函数是<code>Promise</code>对象的状态变为<code>fulfilled</code>时调用，第二个回调函数是<code>Promise</code>对象的状态变为<code>rejected</code>时调用。但<strong>这两个函数都是可选的</strong>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">javascript复制代码promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 成功了，做些什么</span></span>
<span class="line"><span style="color:#ABB2BF;">}, </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">error</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 失败了，捕捉到了错误</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>回调函数参数类型：正常值、promise、thenable</strong></li></ul><p>这<strong>两个回调函数都接受Promise对象传出的值作为参数</strong>，这个参数可以是正常值，也可以是Promise实例，<strong>如果是Promise实例或者thenable值则会递归的展开，等到前面的Promise实例决议后才会决议</strong>。</p><p>何为<code>thenable</code>可以使用鸭子类型检测判断：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E06C75;">javascript复制代码</span><span style="color:#7F848E;font-style:italic;">// 长得像只鸭子？</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 一个有then函数作为属性的对象或函数</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">isThenable</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">p</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">!==</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;&amp;</span></span>
<span class="line"><span style="color:#ABB2BF;">    (</span><span style="color:#C678DD;">typeof</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;object&#39;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">||</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">typeof</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;function&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">&amp;&amp;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">typeof</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">then</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;function&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">  ) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">true</span></span>
<span class="line"><span style="color:#ABB2BF;">  } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">false</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>举个例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E06C75;">javascript复制代码</span><span style="color:#7F848E;font-style:italic;">// p2会等p1决议后才会决议</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">p1</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">p2</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">p1</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">p2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">log</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// 2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 如果p1出错了，p2也会</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">p1</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">reject</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;出错了&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">p2</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">p1</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#E5C07B;">p2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">() </span><span style="color:#7F848E;font-style:italic;">// Uncaught (in promise) 出错了，并且p1、p2的状态都变成了rejected!</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>执行顺序：同步代码、异步代码和决议</strong></li></ul><p>promise在创建时，<strong>同步代码会立即执行，异步代码会根据宏任务还是微任务来判断执行顺序，而<code>then</code>会在决议后的那一轮轮循环前追加到最后运行</strong>，举个例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E06C75;">javascript复制代码</span><span style="color:#7F848E;font-style:italic;">// 以下打印顺序为“1 2 3 4”</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">promise</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;1&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">setTimeout</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">log</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&#39;4&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;3&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}) </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;2&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 以下打印顺序为“1 2 4 3”</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">promise</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;1&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">setTimeout</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">m</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">m</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&#39;4&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;3&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}) </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;2&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>链式调用</strong></li></ul><p>注意，<strong><code>then</code>方法的返回值是一个新的Promise对象</strong>，这就意味着我们可以链式的调用它！这样的话我们就可以像写同步代码一样写出异步代码</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3c077ac7b58c4c85941c73c420249dc9~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?" alt="链式调用" tabindex="0" loading="lazy"><figcaption>链式调用</figcaption></figure><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E06C75;">javascript复制代码new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">v</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">v</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">2</span></span>
<span class="line"><span style="color:#ABB2BF;">}).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">log</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 1 </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 2</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="promise-prototype-catch" tabindex="-1"><a class="header-anchor" href="#promise-prototype-catch" aria-hidden="true">#</a> Promise.prototype.catch</h4><p>在Promise中，<strong><code>reject</code>方法可以理解为抛出错误，而<code>Promise.prototype.catch</code>等价于<code>.then(null, rejection)</code>或<code>.then(undefined, rejection)</code>，用于捕捉错误</strong>。但是一般来说，我们不会在<code>then()</code>方法里面使用第二个参数，而总是使用<code>catch</code>方法，因为更加接近同步try...catch写法，视觉上也更加直观。我们可以通过try...catch来理解它：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E06C75;">javascript复制代码</span><span style="color:#7F848E;font-style:italic;">// 不用catch而使用try...catch</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">throw</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;发生了错误&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">reject</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#E5C07B;">promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">catch</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">error</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 使用catch，更加简洁</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">reject</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;发生了错误&#39;</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#E5C07B;">promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">catch</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">error</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是需要注意两点：</p><ul><li><strong>①如果 Promise 状态已经变成<code>fulfilled</code>，再抛出错误是无效的</strong></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E06C75;">javascript复制代码const</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">promise</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;完成了决议，结果为fulfilled&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">throw</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;test&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#E06C75;">promise</span></span>
<span class="line"><span style="color:#ABB2BF;">  .</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) { </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">) }) </span><span style="color:#7F848E;font-style:italic;">// 完成了决议，结果为fulfilled</span></span>
<span class="line"><span style="color:#ABB2BF;">  .</span><span style="color:#61AFEF;">catch</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">error</span><span style="color:#ABB2BF;">) { </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">) }) </span><span style="color:#7F848E;font-style:italic;">// 不会运行这里的代码</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>②如果没有使用<code>catch()</code>方法指定错误处理的回调函数，Promise 对象抛出的错误不会传递到外层代码，即不会有任何反应，但浏览器会打印错误</strong></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E06C75;">javascript复制代码const</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">p1</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 写一个错误，改变常量x</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">x</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 决议</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;fulfilled&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;我还是运行了，想不到吧&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 我还是运行了，想不到吧</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Uncaught (in promise) TypeError: Assignment to constant variable. 虽然报错，但无法阻止代码继续稳健运行</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-3-3-静态方法promise-all-iterable" tabindex="-1"><a class="header-anchor" href="#_3-3-3-静态方法promise-all-iterable" aria-hidden="true">#</a> 3.3.3 静态方法Promise.all(iterable)</h4><ul><li>这个方法返回一个新的promise对象，该promise对象在iterable参数对象里所有的promise对象状态都为<code>fulfilled</code>的时候才为<code>fulfilled</code>，一旦有任何一个iterable里面的promise对象状态为<code>rejected</code>，则立即让该promise对象状态转变为<code>rejected</code></li><li>这个新的promise对象在触发<code>fulfilled</code>状态以后，会把一个包含iterable里所有promise返回值的数组作为成功回调的返回值，顺序跟iterable的顺序保持一致</li><li>如果这个新的promise对象触发了<code>rejected</code>状态，它会把iterable里第一个触发失败的promise对象的错误信息作为它的失败错误信息</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E06C75;">javascript复制代码const</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">promises</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">id</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">request</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;https://juejin.cn/post/\${id}&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">all</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">promises</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">readArticles</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#ABB2BF;">}).</span><span style="color:#61AFEF;">catch</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">handleError</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-3-4-静态方法promise-race-iterable" tabindex="-1"><a class="header-anchor" href="#_3-3-4-静态方法promise-race-iterable" aria-hidden="true">#</a> 3.3.4 静态方法Promise.race(iterable)</h4><p>当iterable参数里的任意一个子promise被触发状态转变为<code>fulfilled</code>或<code>rejected</code>后，父promise马上也会用子promise的成功返回值或失败详情作为参数调用父promise绑定的相应句柄，并返回该promise对象。可以用来处理超时或者说promise永远不决议的情况，给它应该特定的时间，每决议就返回另一个promise：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E06C75;">javascript复制代码</span><span style="color:#7F848E;font-style:italic;">// timeoutPromise辅助函数</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">timeoutPromise</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">delay</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#61AFEF;">setTimeout</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#ABB2BF;">			</span><span style="color:#61AFEF;">reject</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;一不小心就超时了&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        })</span></span>
<span class="line"><span style="color:#ABB2BF;">	})</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 利用竞态Promise.race处理超时情况</span></span>
<span class="line"><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">race</span><span style="color:#ABB2BF;">([</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">foo</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">timeoutPromise</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3000</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">]).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// foo在约定时间类完成决议</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">err</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// foo()被拒绝或超时，查看err了解是什么情况</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-3-5-静态方法promise-resolve-value" tabindex="-1"><a class="header-anchor" href="#_3-3-5-静态方法promise-resolve-value" aria-hidden="true">#</a> 3.3.5 静态方法Promise.resolve(value)</h4><p>返回一个状态由给定value决定的Promise对象。注意，返回的promise状态不一定是<code>fulfilled</code>的！</p><ul><li><p><strong>参数是一个Promise实例：</strong></p><p>将不做任何修改、原封不动地返回这个实例</p></li><li><p><strong>参数是一个thenable对象：</strong></p><p>将这个对象转为 Promise 对象，然后就立即执行<code>thenable</code>对象的<code>then()</code>方法，其状态可能转变为<code>fulfilled</code>/<code>rejected</code></p></li><li><p><strong>参数不是具有<code>then()</code>方法的对象，或根本就不是对象：</strong></p><p>返回一个新的 Promise 对象，状态为<code>fulfilled</code></p></li><li><p><strong>不传递任何参数：</strong></p><p>直接返回一个<code>fulfilled</code>状态的 Promise 对象</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E06C75;">javascript复制代码</span><span style="color:#7F848E;font-style:italic;">// 通过 Promise.resolve 返回 rejected 状态的例子</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">rejectThenable</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">: (</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#61AFEF;">reject</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;reject reason&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">rejectedPromise</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">rejectThenable</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-3-6-静态方法promise-reject-reason" tabindex="-1"><a class="header-anchor" href="#_3-3-6-静态方法promise-reject-reason" aria-hidden="true">#</a> 3.3.6 静态方法Promise.reject(reason)</h4><p>返回一个状态为<code>rejected</code>的Promise对象，并将给定的失败信息<strong>原封不动的传递</strong>给对应的处理方法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E06C75;">javascript复制代码const</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">promise</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">reject</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;一不小心出错了&#39;</span><span style="color:#ABB2BF;">) </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 等价于</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">promise</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">reject</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;一不小心出错了&#39;</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">catch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">error</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// 一不小心出错了</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-3-7-promise-allsettled-iterable" tabindex="-1"><a class="header-anchor" href="#_3-3-7-promise-allsettled-iterable" aria-hidden="true">#</a> 3.3.7 Promise.allSettled(iterable)</h4><p>ES2020引入，该方法返回一个promise，该promise在所有promise定型后完成。并带有一个对象数组，每个对象对应每个promise的结果。返回的新的 Promise 实例，一旦发生状态变更，<strong>状态总是<code>fulfilled</code></strong>。状态变成<code>fulfilled</code>后，它的回调函数会接收到一个数组作为参数，该数组的每个成员对应前面数组的每个 Promise 对象。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E06C75;">javascript复制代码const</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">resolved</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;成功了&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">rejected</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">reject</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;失败了&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">allSettledPromise</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">allSettled</span><span style="color:#ABB2BF;">([</span><span style="color:#E06C75;">resolved</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">rejected</span><span style="color:#ABB2BF;">])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">allSettledPromise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">res</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// [</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//    { status: &#39;fulfilled&#39;, value: &#39;成功了&#39; },</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//    { status: &#39;rejected&#39;, reason: &#39;失败了&#39; }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// ]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-3-8-promise-any-iterable" tabindex="-1"><a class="header-anchor" href="#_3-3-8-promise-any-iterable" aria-hidden="true">#</a> 3.3.8 Promise.any(iterable)</h4><p>ES2021引入，接收一个Promise对象的集合，当其中的一个promise状态变为<code>fulfilled</code>时，就返回那个成功的promise，如果所有promise实例都变成<code>rejected</code>状态，这返回的promise实例也会变成<code>rejected</code>状态，并可以捕获错误<code>AggregateError: All promises were rejected</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E06C75;">javascript复制代码</span><span style="color:#7F848E;font-style:italic;">// 成功时</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">pErr</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">reject</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;总是失败&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">pSlow</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">setTimeout</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">500</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;最终完成&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">pFast</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">setTimeout</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;很快完成&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">any</span><span style="color:#ABB2BF;">([</span><span style="color:#E06C75;">pErr</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">pSlow</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">pFast</span><span style="color:#ABB2BF;">]).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// &quot;很快完成&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 失败时</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">pErr</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">reject</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;总是失败&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">any</span><span style="color:#ABB2BF;">([</span><span style="color:#E06C75;">pErr</span><span style="color:#ABB2BF;">]).</span><span style="color:#61AFEF;">catch</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">err</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// &quot;AggregateError: No Promise in Promise.any was resolved&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-3-9-两个附加方法done和finally" tabindex="-1"><a class="header-anchor" href="#_3-3-9-两个附加方法done和finally" aria-hidden="true">#</a> 3.3.9 两个附加方法<code>done</code>和<code>finally</code></h4><blockquote><p>这两个方法不在ES6中，需要自行部署，但十分有用</p></blockquote><h5 id="promise-prototype-done" tabindex="-1"><a class="header-anchor" href="#promise-prototype-done" aria-hidden="true">#</a> Promise.prototype.done</h5><p><code>Promise</code> 对象的回调链中，就算你在最后加入<code>catch</code>，如果你<code>catch</code>内本身出现了错误还是无法被捕捉并暴露出去，因此部署一个<code>done</code>方法，它总是处于回调链的尾端，保证抛出任何可能出现的错误。其实现十分简单：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">javascript复制代码Promise</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">done</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">onFulfilled</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">onRejected</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">this</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">onFulfilled</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">onRejected</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">catch</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">reason</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#7F848E;font-style:italic;">// 在最后抛出一个全局错误</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#61AFEF;">setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">throw</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">reason</span></span>
<span class="line"><span style="color:#ABB2BF;">      }, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    })</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="promise-prototype-finally" tabindex="-1"><a class="header-anchor" href="#promise-prototype-finally" aria-hidden="true">#</a> Promise.prototype.finally</h5><p><code>finally</code>方法用于指定不管<code>Promise</code>对象最后状态如何，都会执行的操作。它与<code>done</code>方法的最大区别，它接受一个普通的回调函数作为参数，该函数不管怎样都必须执行。其实现也非常简单：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">javascript复制代码Promise</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">finally</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">callback</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">P</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">constructor</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">P</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">callback</span><span style="color:#ABB2BF;">()).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;font-style:italic;">reason</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">P</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">callback</span><span style="color:#ABB2BF;">()).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">throw</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">reason</span></span>
<span class="line"><span style="color:#ABB2BF;">      })</span></span>
<span class="line"><span style="color:#ABB2BF;">  )</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="async-await" tabindex="-1"><a class="header-anchor" href="#async-await" aria-hidden="true">#</a> async/await</h2><ol><li>基于Promise实现的，它不能用于普通的回调函数。它是解决回调地狱最好的方法【Promise + async awiat的结合】</li><li>sync/await使得异步代码看起来像同步代码，这正是它的魔力所在。</li></ol><p>一个函数如果加上 <code>async</code> ，那么该函数就会返回一个<code>Promise</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">async1</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;1&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">async1</span><span style="color:#ABB2BF;">()) </span><span style="color:#7F848E;font-style:italic;">// -&gt; Promise {&lt;resolved&gt;: &quot;1&quot;}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,107);function t(B,i){return n(),a("div",null,[c,l(" more "),r])}const d=s(p,[["render",t],["__file","浏览器异步.html.vue"]]);export{d as default};
